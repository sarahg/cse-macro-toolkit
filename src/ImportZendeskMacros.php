<?php

namespace DeskMacrosToZendesk;

use DeskMacrosToZendesk\ZendeskApi;
use StdClass; // not necessary but VS Code made me do it

class ImportZendeskMacros
{

  public function __construct(string $filename)
  {
    $this->filename = $filename;

    // Retrieve all macros and merge in our text updates.
    $macros = $this->updateMacros($this->filename);
    echo "Fetching and updating macros for import...";

    // Format objects for ZD.
    $formatted = $this->convertMacros($macros);
    echo "\nFormatting macros...";

    // Post to ZD.
    echo "\nPosting macros to Zendesk...";
    $count = 0;
    foreach ($formatted as $macro) {
      if ($this->postMacro($macro)) {
        $count++;
      }
    }
    echo "\nPosted " . $count . " macros to Zendesk!";

  }

  /**
   * Update macros with edited text.
   * 
   * @param string $file
   *   Filename of the JSON file containing macros.
   *   This file is generated by the ExportExtraActions class.
   * @return object
   *   Object containing macros, updated with edits from CSE.
   */
  public function updateMacros(string $file)
  {
    // Get JSON of edited replies (which we pulled from our Google Sheet via gsjson),
    // and wrangle it a little to make the next step easier.
    $string_edited = file_get_contents('exports/replies-edited.json');
    $edited_replies = json_decode($string_edited);
    $edits = [];
    foreach ($edited_replies as $reply) {
      $edits[$reply->id] = $reply->text;
    }

    // Retrieve JSON of unedited, non-deprecated macros + actions.
    $string_orig = file_get_contents($file);
    $macros = json_decode($string_orig);
    
    // Merge edited replies into our main array of macros.
    $count = 0;
    foreach ($macros as $desk_id => $macro) {
      if (isset($macro->actions)) {
        foreach ($macro->actions as $key => $action) {
          // If there's an edited version of this reply/note, pull it in.
          if (isset($edits[$desk_id]) && in_array($action->type, ['set-case-quick-reply', 'set-case-note'])) {
            $macros->{$desk_id}->actions[$key]->values = $edits[$desk_id];
            $count++;
          }
        }
      }
    }

    echo "\nUpdated text on " . $count . " macros...";
    return $macros;
  }

  /**
   * Restructure macros for ZD import.
   */
  public function convertMacros(StdClass $macros)
  {
    $zd_macros = [];
    foreach ($macros as $desk_macro) {
      $zd_macro = new StdClass();
      $zd_macro->macro = new StdClass();

      $zd_macro->macro->title = $desk_macro->title;
      $zd_macro->macro->active = true;
      $zd_macro->macro->actions = $this->convertActions($desk_macro);

      $zd_macros[] = $zd_macro;
    }
    
    return $zd_macros;
  }

  /**
   * Convert actions.
   * 
   * @return array $actions
   *   ZD-ready actions and values.
   */
  public function convertActions(StdClass $macro)
  {
    $zd_actions = [];
    $action_map = $this->actionMap();

    foreach ($macro->actions as $action) {
      if (!isset($action_map[$action->type])) {
        continue;
      }
      $zd_action = new StdClass();
      $zd_action->field = $action_map[$action->type];
      $zd_action->value = $action->values;
      $zd_actions[] = $zd_action;

      // If we added a comment_value action, set visibility.
      if (in_array($action->type, ['set-case-description', 'set-case-note'])) {
        $zd_action = new StdClass();
        $zd_action->field = 'comment_mode_is_public';
        $zd_action->value = FALSE;
        $zd_actions[] = $zd_action;
      }
      else if ($action->type == 'set-case-quick-reply') {
        $zd_action = new StdClass();
        $zd_action->field = 'comment_mode_is_public';
        $zd_action->value = TRUE;
        $zd_actions[] = $zd_action;
      }
    
    }

    return $zd_actions;
  }

  /**
   * Return Desk actions mapped to Zendesk equivalents.
   * @return array
   */
  static function actionMap()
  {
    return [
      'set-case-outbound-email-subject' => 'subject',
      'set-case-quick-reply' => 'comment_value',
      'set-case-note' => 'comment_value',

      // Case Description was an admin-only field in Desk
      // and does not exist in ZD. Move those to private notes.
      'set-case-description' => 'comment_value',

      // These are arrays in Desk but strings in ZD @todo
      //'set-case-labels' => 'set_tags',
      //'append-case-labels' => 'current_tags',

      // These will both need another map @todo
      //'set-case-status' => 'status',
      //'set-case-group' => 'group_id',
    ];
  }

  /**
   * Post a single macro to Zendesk.
   * 
   * @param object $macro
   * @return boolean
   *   True for a successful post.
   */
  public function postMacro(StdClass $macro)
  {
    $api = new ZendeskApi('/api/v2/macros');
    if ($api->postZendeskData($macro)) {
      return true; 
    }
    return false;
  }

}
